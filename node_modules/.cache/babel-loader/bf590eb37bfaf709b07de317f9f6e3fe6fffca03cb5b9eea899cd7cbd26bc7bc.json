{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hayden\\\\Documents\\\\BVT School Work\\\\ChatGPT\\\\cookie-clicker-game\\\\temp-repo\\\\src\\\\components\\\\buildings\\\\buildings.js\",\n  _s = $RefreshSig$();\n// /src/components/buildings/buildings.js\nimport styles from './buildings.module.css';\nimport buildingStats from './building-stats.json';\nimport React, { useState, useEffect } from 'react';\nimport fallbackImage from '../../assets/images/buildings/fallback.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Buildings({\n  gameState,\n  setGameState\n}) {\n  _s();\n  const [buildings, setBuildings] = useState(() => {\n    // Initialize all buildings with a count of 0\n    const initialBuildings = {};\n    for (const buildingName in buildingStats) {\n      if (buildingStats.hasOwnProperty(buildingName)) {\n        initialBuildings[buildingName] = {\n          count: 0,\n          cost: buildingStats[buildingName].cost\n        };\n      }\n    }\n    return initialBuildings;\n  });\n  useEffect(() => {\n    // Load existing buildings from gameState if available, otherwise initialize with base stats\n    if (gameState && gameState.buildings) {\n      setBuildings(prevBuildings => {\n        const updatedBuildings = {\n          ...prevBuildings\n        };\n        for (const buildingName in buildingStats) {\n          if (buildingStats.hasOwnProperty(buildingName)) {\n            if (gameState.buildings[buildingName]) {\n              updatedBuildings[buildingName] = gameState.buildings[buildingName];\n            } else {\n              updatedBuildings[buildingName] = {\n                count: 0,\n                cost: buildingStats[buildingName].cost\n              };\n            }\n          }\n        }\n        return updatedBuildings;\n      });\n    }\n  }, [gameState]);\n  useEffect(() => {\n    // Generate income based on building stats\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, {\n      count\n    }]) => {\n      if (count > 0 && buildingStats[buildingName]) {\n        const interval = setInterval(() => {\n          setGameState(prevState => ({\n            ...prevState,\n            currency: prevState.currency + count * buildingStats[buildingName].income\n          }));\n        }, buildingStats[buildingName].incomeInterval);\n        return interval;\n      }\n      return null;\n    });\n\n    // Clear intervals when component unmounts or buildings change\n    return () => {\n      incomeIntervals.forEach(interval => {\n        if (interval) clearInterval(interval);\n      });\n    };\n  }, [buildings, setGameState]);\n\n  // Add a new building or increase count if it exists\n  const addBuilding = buildingName => {\n    var _buildings$buildingNa, _buildings$buildingNa2, _buildingStats$buildi, _buildingStats$buildi2, _buildingStats$buildi3;\n    const currentCount = ((_buildings$buildingNa = buildings[buildingName]) === null || _buildings$buildingNa === void 0 ? void 0 : _buildings$buildingNa.count) || 0;\n    const currentCost = ((_buildings$buildingNa2 = buildings[buildingName]) === null || _buildings$buildingNa2 === void 0 ? void 0 : _buildings$buildingNa2.cost) || buildingStats[buildingName].cost;\n    const costIncreaseModifier = ((_buildingStats$buildi = buildingStats[buildingName]) === null || _buildingStats$buildi === void 0 ? void 0 : _buildingStats$buildi.costIncreaseModifier) || 1.15;\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\n\n    // Check if user has enough currency to buy the building\n    if (gameState.currency < currentCost) {\n      alert('Not enough currency to buy this building!');\n      return;\n    }\n\n    // Check if the player meets the level requirement to buy the building\n    const levelRequirement = ((_buildingStats$buildi2 = buildingStats[buildingName]) === null || _buildingStats$buildi2 === void 0 ? void 0 : _buildingStats$buildi2.levelRequirement) || 1;\n    if (gameState.level < levelRequirement) {\n      alert(`You need to be at least level ${levelRequirement} to buy this building!`);\n      return;\n    }\n    const newBuildings = {\n      ...buildings,\n      [buildingName]: {\n        count: currentCount + 1,\n        cost: newCost\n      }\n    };\n    setBuildings(newBuildings);\n\n    // Update gameState with new buildings object, deduct cost, and add experience\n    const expReward = ((_buildingStats$buildi3 = buildingStats[buildingName]) === null || _buildingStats$buildi3 === void 0 ? void 0 : _buildingStats$buildi3.expReward) || 0;\n    setGameState(prevState => ({\n      ...prevState,\n      currency: prevState.currency - currentCost,\n      buildings: newBuildings,\n      experience: prevState.experience + expReward\n    }));\n  };\n\n  // Add five buildings at once or increase count if they exist\n  const addFiveBuildings = buildingName => {\n    var _buildings$buildingNa3, _buildings$buildingNa4, _buildingStats$buildi4, _buildingStats$buildi5, _buildingStats$buildi6;\n    let currentCount = ((_buildings$buildingNa3 = buildings[buildingName]) === null || _buildings$buildingNa3 === void 0 ? void 0 : _buildings$buildingNa3.count) || 0;\n    let currentCost = ((_buildings$buildingNa4 = buildings[buildingName]) === null || _buildings$buildingNa4 === void 0 ? void 0 : _buildings$buildingNa4.cost) || buildingStats[buildingName].cost;\n    const costIncreaseModifier = ((_buildingStats$buildi4 = buildingStats[buildingName]) === null || _buildingStats$buildi4 === void 0 ? void 0 : _buildingStats$buildi4.costIncreaseModifier) || 1.15;\n    let totalCost = 0;\n\n    // Calculate total cost for buying 5 buildings\n    for (let i = 0; i < 5; i++) {\n      totalCost += currentCost;\n      currentCost = Math.round(currentCost * costIncreaseModifier);\n    }\n\n    // Check if user has enough currency to buy 5 buildings\n    if (gameState.currency < totalCost) {\n      alert('Not enough currency to buy 5 of this building!');\n      return;\n    }\n\n    // Check if the player meets the level requirement to buy the building\n    const levelRequirement = ((_buildingStats$buildi5 = buildingStats[buildingName]) === null || _buildingStats$buildi5 === void 0 ? void 0 : _buildingStats$buildi5.levelRequirement) || 1;\n    if (gameState.level < levelRequirement) {\n      alert(`You need to be at least level ${levelRequirement} to buy this building!`);\n      return;\n    }\n    const newBuildings = {\n      ...buildings,\n      [buildingName]: {\n        count: currentCount + 5,\n        cost: currentCost\n      }\n    };\n    setBuildings(newBuildings);\n\n    // Update gameState with new buildings object, deduct total cost, and add experience\n    const expReward = ((_buildingStats$buildi6 = buildingStats[buildingName]) === null || _buildingStats$buildi6 === void 0 ? void 0 : _buildingStats$buildi6.expReward) || 0;\n    setGameState(prevState => ({\n      ...prevState,\n      currency: prevState.currency - totalCost,\n      buildings: newBuildings,\n      experience: prevState.experience + expReward * 5\n    }));\n  };\n\n  // Clear all buildings for development testing\n  const clearAllBuildings = () => {\n    console.log('Clearing all buildings for testing purposes');\n    const clearedBuildings = {};\n    for (const buildingName in buildingStats) {\n      if (buildingStats.hasOwnProperty(buildingName)) {\n        clearedBuildings[buildingName] = {\n          count: 0,\n          cost: buildingStats[buildingName].cost\n        };\n      }\n    }\n    setBuildings(clearedBuildings);\n    setGameState(prevState => ({\n      ...prevState,\n      buildings: clearedBuildings\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.buildings,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Buildings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.buildingList,\n      children: Object.entries(buildings).map(([building, {\n        count,\n        cost\n      }]) => {\n        var _buildingStats$buildi7, _buildingStats$buildi8;\n        const levelRequirement = ((_buildingStats$buildi7 = buildingStats[building]) === null || _buildingStats$buildi7 === void 0 ? void 0 : _buildingStats$buildi7.levelRequirement) || 1;\n        if (gameState.level < levelRequirement) {\n          // Hide the building if the player does not meet the level requirement\n          return null;\n        }\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.buildingItem,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: require(`../../assets/images/buildings/building_${building.toLowerCase().replace(/ /g, '_')}.png`),\n            alt: building,\n            className: styles.buildingThumbnail,\n            onError: e => e.target.src = fallbackImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buildingTitle,\n            children: building\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.buildingDetails,\n            children: [\"Count: \", count, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 32\n            }, this), \"Income: \", ((_buildingStats$buildi8 = buildingStats[building]) === null || _buildingStats$buildi8 === void 0 ? void 0 : _buildingStats$buildi8.income) || 0, \" per interval \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 191,\n              columnNumber: 77\n            }, this), \"Next Cost: \", cost.toLocaleString(), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 52\n            }, this), \"Level Requirement: \", levelRequirement]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => addBuilding(building),\n            className: styles.buildingButton,\n            disabled: gameState.currency < cost,\n            children: \"Buy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => addFiveBuildings(building),\n            className: styles.buildingButton,\n            disabled: gameState.currency < cost * 5,\n            children: \"Buy 5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this)]\n        }, building, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearAllBuildings,\n      className: `${styles.buildingButton} ${styles.devButton}`,\n      children: \"Clear All Buildings (Dev Button)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n}\n_s(Buildings, \"d/dssbYkqCXgZvO49zS/VSN9XMk=\");\n_c = Buildings;\nexport default Buildings;\nvar _c;\n$RefreshReg$(_c, \"Buildings\");","map":{"version":3,"names":["styles","buildingStats","React","useState","useEffect","fallbackImage","jsxDEV","_jsxDEV","Buildings","gameState","setGameState","_s","buildings","setBuildings","initialBuildings","buildingName","hasOwnProperty","count","cost","prevBuildings","updatedBuildings","incomeIntervals","Object","entries","map","interval","setInterval","prevState","currency","income","incomeInterval","forEach","clearInterval","addBuilding","_buildings$buildingNa","_buildings$buildingNa2","_buildingStats$buildi","_buildingStats$buildi2","_buildingStats$buildi3","currentCount","currentCost","costIncreaseModifier","newCost","Math","round","alert","levelRequirement","level","newBuildings","expReward","experience","addFiveBuildings","_buildings$buildingNa3","_buildings$buildingNa4","_buildingStats$buildi4","_buildingStats$buildi5","_buildingStats$buildi6","totalCost","i","clearAllBuildings","console","log","clearedBuildings","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buildingList","building","_buildingStats$buildi7","_buildingStats$buildi8","buildingItem","src","require","toLowerCase","replace","alt","buildingThumbnail","onError","e","target","buildingTitle","buildingDetails","toLocaleString","onClick","buildingButton","disabled","devButton","_c","$RefreshReg$"],"sources":["C:/Users/Hayden/Documents/BVT School Work/ChatGPT/cookie-clicker-game/temp-repo/src/components/buildings/buildings.js"],"sourcesContent":["// /src/components/buildings/buildings.js\r\nimport styles from './buildings.module.css';\r\nimport buildingStats from './building-stats.json';\r\nimport React, { useState, useEffect } from 'react';\r\nimport fallbackImage from '../../assets/images/buildings/fallback.png';\r\n\r\nfunction Buildings({ gameState, setGameState }) {\r\n  const [buildings, setBuildings] = useState(() => {\r\n    // Initialize all buildings with a count of 0\r\n    const initialBuildings = {};\r\n    for (const buildingName in buildingStats) {\r\n      if (buildingStats.hasOwnProperty(buildingName)) {\r\n        initialBuildings[buildingName] = {\r\n          count: 0,\r\n          cost: buildingStats[buildingName].cost,\r\n        };\r\n      }\r\n    }\r\n    return initialBuildings;\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Load existing buildings from gameState if available, otherwise initialize with base stats\r\n    if (gameState && gameState.buildings) {\r\n      setBuildings((prevBuildings) => {\r\n        const updatedBuildings = { ...prevBuildings };\r\n        for (const buildingName in buildingStats) {\r\n          if (buildingStats.hasOwnProperty(buildingName)) {\r\n            if (gameState.buildings[buildingName]) {\r\n              updatedBuildings[buildingName] = gameState.buildings[buildingName];\r\n            } else {\r\n              updatedBuildings[buildingName] = {\r\n                count: 0,\r\n                cost: buildingStats[buildingName].cost,\r\n              };\r\n            }\r\n          }\r\n        }\r\n        return updatedBuildings;\r\n      });\r\n    }\r\n  }, [gameState]);\r\n\r\n  useEffect(() => {\r\n    // Generate income based on building stats\r\n    const incomeIntervals = Object.entries(buildings).map(([buildingName, { count }]) => {\r\n      if (count > 0 && buildingStats[buildingName]) {\r\n        const interval = setInterval(() => {\r\n          setGameState((prevState) => ({\r\n            ...prevState,\r\n            currency: prevState.currency + count * buildingStats[buildingName].income,\r\n          }));\r\n        }, buildingStats[buildingName].incomeInterval);\r\n        return interval;\r\n      }\r\n      return null;\r\n    });\r\n\r\n    // Clear intervals when component unmounts or buildings change\r\n    return () => {\r\n      incomeIntervals.forEach((interval) => {\r\n        if (interval) clearInterval(interval);\r\n      });\r\n    };\r\n  }, [buildings, setGameState]);\r\n\r\n  // Add a new building or increase count if it exists\r\n  const addBuilding = (buildingName) => {\r\n    const currentCount = buildings[buildingName]?.count || 0;\r\n    const currentCost = buildings[buildingName]?.cost || buildingStats[buildingName].cost;\r\n    const costIncreaseModifier = buildingStats[buildingName]?.costIncreaseModifier || 1.15;\r\n    const newCost = Math.round(currentCost * costIncreaseModifier); // Increase cost based on modifier from building-stats.json\r\n\r\n    // Check if user has enough currency to buy the building\r\n    if (gameState.currency < currentCost) {\r\n      alert('Not enough currency to buy this building!');\r\n      return;\r\n    }\r\n\r\n    // Check if the player meets the level requirement to buy the building\r\n    const levelRequirement = buildingStats[buildingName]?.levelRequirement || 1;\r\n    if (gameState.level < levelRequirement) {\r\n      alert(`You need to be at least level ${levelRequirement} to buy this building!`);\r\n      return;\r\n    }\r\n\r\n    const newBuildings = {\r\n      ...buildings,\r\n      [buildingName]: {\r\n        count: currentCount + 1,\r\n        cost: newCost,\r\n      },\r\n    };\r\n    setBuildings(newBuildings);\r\n\r\n    // Update gameState with new buildings object, deduct cost, and add experience\r\n    const expReward = buildingStats[buildingName]?.expReward || 0;\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      currency: prevState.currency - currentCost,\r\n      buildings: newBuildings,\r\n      experience: prevState.experience + expReward,\r\n    }));\r\n  };\r\n\r\n  // Add five buildings at once or increase count if they exist\r\n  const addFiveBuildings = (buildingName) => {\r\n    let currentCount = buildings[buildingName]?.count || 0;\r\n    let currentCost = buildings[buildingName]?.cost || buildingStats[buildingName].cost;\r\n    const costIncreaseModifier = buildingStats[buildingName]?.costIncreaseModifier || 1.15;\r\n    let totalCost = 0;\r\n\r\n    // Calculate total cost for buying 5 buildings\r\n    for (let i = 0; i < 5; i++) {\r\n      totalCost += currentCost;\r\n      currentCost = Math.round(currentCost * costIncreaseModifier);\r\n    }\r\n\r\n    // Check if user has enough currency to buy 5 buildings\r\n    if (gameState.currency < totalCost) {\r\n      alert('Not enough currency to buy 5 of this building!');\r\n      return;\r\n    }\r\n\r\n    // Check if the player meets the level requirement to buy the building\r\n    const levelRequirement = buildingStats[buildingName]?.levelRequirement || 1;\r\n    if (gameState.level < levelRequirement) {\r\n      alert(`You need to be at least level ${levelRequirement} to buy this building!`);\r\n      return;\r\n    }\r\n\r\n    const newBuildings = {\r\n      ...buildings,\r\n      [buildingName]: {\r\n        count: currentCount + 5,\r\n        cost: currentCost,\r\n      },\r\n    };\r\n    setBuildings(newBuildings);\r\n\r\n    // Update gameState with new buildings object, deduct total cost, and add experience\r\n    const expReward = buildingStats[buildingName]?.expReward || 0;\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      currency: prevState.currency - totalCost,\r\n      buildings: newBuildings,\r\n      experience: prevState.experience + expReward * 5,\r\n    }));\r\n  };\r\n\r\n  // Clear all buildings for development testing\r\n  const clearAllBuildings = () => {\r\n    console.log('Clearing all buildings for testing purposes');\r\n    const clearedBuildings = {};\r\n    for (const buildingName in buildingStats) {\r\n      if (buildingStats.hasOwnProperty(buildingName)) {\r\n        clearedBuildings[buildingName] = {\r\n          count: 0,\r\n          cost: buildingStats[buildingName].cost,\r\n        };\r\n      }\r\n    }\r\n    setBuildings(clearedBuildings);\r\n    setGameState((prevState) => ({\r\n      ...prevState,\r\n      buildings: clearedBuildings,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.buildings}>\r\n      <h2>Buildings</h2>\r\n      <div className={styles.buildingList}>\r\n        {Object.entries(buildings).map(([building, { count, cost }]) => {\r\n          const levelRequirement = buildingStats[building]?.levelRequirement || 1;\r\n          if (gameState.level < levelRequirement) {\r\n            // Hide the building if the player does not meet the level requirement\r\n            return null;\r\n          }\r\n          return (\r\n            <div key={building} className={styles.buildingItem}>\r\n              <img \r\n                src={require(`../../assets/images/buildings/building_${building.toLowerCase().replace(/ /g, '_')}.png`)} \r\n                alt={building}\r\n                className={styles.buildingThumbnail}\r\n                onError={(e) => e.target.src = fallbackImage}\r\n              />\r\n              <div className={styles.buildingTitle}>{building}</div>\r\n              <div className={styles.buildingDetails}>\r\n                Count: {count} <br />\r\n                Income: {buildingStats[building]?.income || 0} per interval <br />\r\n                Next Cost: {cost.toLocaleString()} <br />\r\n                Level Requirement: {levelRequirement}\r\n              </div>\r\n              <button \r\n                onClick={() => addBuilding(building)} \r\n                className={styles.buildingButton} \r\n                disabled={gameState.currency < cost}\r\n              >\r\n                Buy\r\n              </button>\r\n              <button \r\n                onClick={() => addFiveBuildings(building)} \r\n                className={styles.buildingButton} \r\n                disabled={gameState.currency < cost * 5}\r\n              >\r\n                Buy 5\r\n              </button>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <button onClick={clearAllBuildings} className={`${styles.buildingButton} ${styles.devButton}`}>Clear All Buildings (Dev Button)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Buildings;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}